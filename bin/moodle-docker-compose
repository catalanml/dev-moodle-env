#!/usr/bin/env bash
set -e

# First find out if this was called from symlink,
# then find the real path of parent directory.
# This is needed because macOS does not have GNU realpath.
thisfile=$( readlink "${BASH_SOURCE[0]}" ) || thisfile="${BASH_SOURCE[0]}"
basedir="$( cd "$( dirname "$thisfile" )/../" && pwd -P )"

if [ ! -d "$MOODLE_DOCKER_WWWROOT" ];
then
    echo 'Error: $MOODLE_DOCKER_WWWROOT is not set or not an existing directory'
    exit 1
fi

if [ -z "$MOODLE_DOCKER_DB" ];
then
    echo 'Error: $MOODLE_DOCKER_DB is not set'
    exit 1
fi

export ASSETDIR="${basedir}/assets"

# Determine which docker compose command to use
if docker compose version > /dev/null 2>&1; then
  # 'docker compose' (v2) is available
  dockercompose="docker compose"
elif docker-compose version > /dev/null 2>&1; then
  # 'docker compose' (v2) is not available, but 'docker-compose' (v1) is
  echo "INFO: 'docker compose' (v2) command failed or not found. Falling back to 'docker-compose' (v1)."
  dockercompose="docker-compose"
else
  # Neither is available
  echo "ERROR: Neither 'docker compose' (v2) nor 'docker-compose' (v1) could be found or executed successfully."
  echo "Please ensure Docker and Docker Compose are installed and correctly configured in your PATH."
  exit 1
fi

dockercompose_files="-f ${basedir}/base.yml"
dockercompose_files="${dockercompose_files} -f ${basedir}/service.mail.yml"

# PHP Version.
export MOODLE_DOCKER_PHP_VERSION=${MOODLE_DOCKER_PHP_VERSION:-8.2}

# Database flavour.
dockercompose_files="${dockercompose_files} -f ${basedir}/db.${MOODLE_DOCKER_DB}.yml"

# Add support for version specific database settings.
if [ ! -z "$MOODLE_DOCKER_DB_VERSION" ];
then
    filename="${basedir}/db.${MOODLE_DOCKER_DB}.${MOODLE_DOCKER_DB_VERSION}.yml"
    if [ -f $filename ]; then
        dockercompose_files="${dockercompose_files} -f ${filename}"
    fi
fi

# Expose DB port if requested.
if [[ $MOODLE_DOCKER_DB_PORT == *":"* ]] || [[ $MOODLE_DOCKER_DB_PORT -gt 0 ]]
then
    # If no bind ip has been configured (bind_ip:port), default to 127.0.0.1
    if [[ ! $MOODLE_DOCKER_DB_PORT == *":"* ]]
    then
        export MOODLE_DOCKER_DB_PORT=127.0.0.1:$MOODLE_DOCKER_DB_PORT
    fi
    filename="${basedir}/db.${MOODLE_DOCKER_DB}.port.yml"
    if [ -f $filename ];
    then
        dockercompose_files="${dockercompose_files} -f ${filename}"
    fi
fi

# External services
if [[ ! -z "$MOODLE_DOCKER_PHPUNIT_EXTERNAL_SERVICES" ]];
then
    dockercompose_files="${dockercompose_files} -f ${basedir}/phpunit-external-services.yml"
fi

# BBB Mock
if [[ ! -z "$MOODLE_DOCKER_BBB_MOCK" ]];
then
    dockercompose_files="${dockercompose_files} -f ${basedir}/bbb-mock.yml"
fi

# Matrix Mock
if [[ ! -z "$MOODLE_DOCKER_MATRIX_MOCK" ]];
then
    dockercompose_files="${dockercompose_files} -f ${basedir}/matrix-mock.yml"
fi

# Machine Learning backend
if [[ ! -z "$MOODLE_DOCKER_MLBACKEND" ]];
then
    dockercompose_files="${dockercompose_files} -f ${basedir}/mlbackend.yml"
fi

#  Faildump directory
if [[ ! -z "$MOODLE_DOCKER_BEHAT_FAILDUMP" ]];
then
    if [ ! -d "$MOODLE_DOCKER_BEHAT_FAILDUMP" ];
    then
        echo 'Error: $MOODLE_DOCKER_BEHAT_FAILDUMP is not an existing directory'
        exit 1
    fi
    dockercompose_files="${dockercompose_files} -f ${basedir}/behat-faildump.yml"
fi

# Webserver host
export MOODLE_DOCKER_WEB_HOST=${MOODLE_DOCKER_WEB_HOST:-localhost}

# Webserver port
export MOODLE_DOCKER_WEB_PORT=${MOODLE_DOCKER_WEB_PORT:-8000}
if [[ $MOODLE_DOCKER_WEB_PORT == *":"* ]] || [[ $MOODLE_DOCKER_WEB_PORT -gt 0 ]]
then
    # If no bind ip has been configured (bind_ip:port), default to 127.0.0.1
    if [[ ! $MOODLE_DOCKER_WEB_PORT == *":"* ]]
    then
        MOODLE_DOCKER_WEB_PORT=127.0.0.1:$MOODLE_DOCKER_WEB_PORT
    fi
    dockercompose_files="${dockercompose_files} -f ${basedir}/webserver.port.yml"
fi

# Behat test timeout factor - Retaining this as Behat might still be used without Selenium for API/CLI tests
export MOODLE_DOCKER_TIMEOUT_FACTOR=${MOODLE_DOCKER_TIMEOUT_FACTOR:-1}

# Mac OS Compatbility
if [[ "$(uname)" == "Darwin" ]]; then
    # Support https://docs.docker.com/docker-for-mac/osxfs-caching/
    dockercompose_files="${dockercompose_files} -f ${basedir}/volumes-cached.yml"
fi

# Apply local customisations if a local.yml is found.
# Note: This must be the final modification before the docker-compose command is called.
localfile="${basedir}/local.yml"
if [ -f "${localfile}" ]
then
  echo "Including local options from ${localfile}"
  dockercompose_files="${dockercompose_files} -f ${localfile}"
fi

# Construct the full command
# Note: $dockercompose is "docker compose" or "docker-compose"
# $dockercompose_files contains all the "-f /path/to/file.yml" arguments
# "$@" contains the command like "up -d"
full_command="$dockercompose $dockercompose_files "$@""

# For debugging, you can uncomment the next line to see the exact command being run
# echo "Executing: $full_command"

eval "$full_command"
